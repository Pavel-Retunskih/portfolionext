import {NextRequest, NextResponse} from "next/server";

const baseUrl = `https://api.telegram.org/bot${process.env.BOT_TOKEN}/`
const chatId = process.env.CHAT_ID;

export async function POST(req: NextRequest) {
  try {
    const data: { name: string, email: string, message: string } = await req.json();

    const message = `
    üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞!
     üë§ –ò–º—è: ${data.name}
     üìß Email: ${data.email}
     üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}
     üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
     `;

    const response = await fetch(`${baseUrl}sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message
      })
    });

    if (!response.ok) {
      const errorText: Response & { description: string } = await response.json();
      return NextResponse.json(
          {success: false, message: errorText.description},
          {status: 500}
      );
    }
    return NextResponse.json({success: true, message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'}, {status: 200});

  } catch (error) {
    console.error('Error processing form data:', error);
    return NextResponse.json(
        {success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'},
        {status: 500}
    );
  }
}